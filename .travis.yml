language: minimal
services:
  - docker

env:
  - DOCKER_COMPOSE_VERSION=1.24.1

before_install:
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin

jobs:
  include:
    - stage: test
      name: Integration Tests
      script: |
        NODE_VERSION=$(cat .nvmrc) PYTHON_VERSION=$(cat .python-version) docker-compose build --parallel
        NODE_VERSION=$(cat .nvmrc) PYTHON_VERSION=$(cat .python-version) docker-compose run itests npm run itests
    - name: Backend Unit Tests
      script: |
        set -ex
        cd backend
        docker build -t webpi-backend:latest --file dev.Dockerfile --build-arg PYTHON_VERSION=$(cat ../.python-version) .
        docker run -i webpi-backend:latest pytest
        docker run -i webpi-backend:latest pylint -j0 webpi tests
        docker run -i webpi-backend:latest black --check webpi tests
        set +x
    - name: Frontend Unit Tests
      script: |
        set -ex
        cd frontend
        docker build -t webpi-frontend:latest --file dev.Dockerfile --build-arg NODE_VERSION=$(cat ../.nvmrc) .
        docker run -e CI=true -i webpi-frontend:latest npm test -- --coverage
        docker run -i webpi-frontend:latest npm run --silent check-fmt
        set +x
    - name: Build Frontend
      script: |
        cd frontend
        sudo docker build -t webpi-frontend:latest --build-arg NODE_VERSION=$(cat ../.nvmrc) .
        sudo docker run -i webpi-frontend:latest > webpi-$(git describe --tags '--match=v*').tar.gz
        tar -tf webpi-$(git describe --tags '--match=v*').tar.gz

# deploy:
#   provider: releases
#   api_key:
#       secure: "GITHUB OAUTH TOKEN"
#   file: "FILE TO UPLOAD"
#   skip_cleanup: true
#   on:
#     tags: true
